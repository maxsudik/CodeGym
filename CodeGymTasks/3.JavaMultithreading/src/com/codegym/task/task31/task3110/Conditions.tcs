taskKey="com.codegym.task.task31.task3110.big18"\n\nArchiver (part 18)


You&#39;re an excellent student! I&#39;ve slightly tweaked your code. You can use this archiver for zipping files
in everyday life. If you have the time and desire, try adding an operation that varies the
zip compression level!


Требования:
1.	The archiver is ready.


Archiver (part 18)


There&#39;s just one small trifle left: adding a file to an archive. It sounds shady, but that&#39;s exactly what we&#39;re going
to do. Adding files is similar to removing them: we create a temporary archive file, copy over
all of the old archive&#39;s contents, and then add the new files. Then we replace the old archive file
with the new one.
1.	Add a public void addFiles(List&lt;Path&gt; absolutePathList) throws Exception method to the
ZipFileManager class, where absolutePathList is a list of absolute paths to the files to be added. This method
must:
1.1. As usual, throw a NoSuchZipFileException if the archive file doesn&#39;t exist
1.2. Create a temporary archive file
1.3. Go through all the files in the original archive. Copy each file to the new archive,
and add its name to a local list.
1.4. Go through the list of files to add.
1.5. Check whether each file exists and whether it is a regular file.
If something isn&#39;t right, then throw a PathNotFoundException.
1.6. Check whether the file to be added is already in the archive (use the list in step 1.3). This is
possible if the user has already added it.
- If the file isn&#39;t in the list, add it to the new archive and display a message indicating that the file
was added to the archive
- If the file is in the list, just tell the user that the file already exists in the archive
1.7. Replace the original archive file with the temporary file, which already has all of the added
files.
2.	Add a public void addFile(Path absolutePath) throws Exception method to the ZipFileManager class,
and implement it by calling the addFiles() method&mdash;by analogy with what we did for
removing a file.
3.	Implement the ZipAddCommand class&#39;s execute() method. It&#39;s business as usual here, but don&#39;t forget to ask
the user which file to add to which archive, and handle the
PathNotFoundException that might be thrown by the addFile() method.
4.	Run the program and verify that adding a file now works.



Archiver (part 18)


It&#39;s time to remove something from an archive. An archive is a tricky thing&mdash;you can&#39;t just go and
remove an element.
Why? Imagine we decided to invent our own text compression algorithm. After examining the source
text, we see that the phrase &quot;being a programmer is cool&quot; occurs often. In the second and subsequent
instances of our phrase, we can replace the phrase with a note that this location represents the same phrase that was used in line S,
starting from character K and N characters long. As we replace a lot of repeated
phrases, the text shrink noticeably, but becomes unreadable to those not familiar with our compression algorithm.
Of course, we can recover the text (extract it). Now imagine what we need to remove
the part of the text that is referenced by the compressed fragments. If we did this, our entire archive would
become meaningless. That&#39;s why you can&#39;t simply remove part of an archive. This is a highly simplified description
of a compression technique; in reality, everything is far more complicated.
As a result, to remove something from an archive, you need to create a new archive, and copy over everything except
the removed file. Then you replace the old archive with the newly created one.
1.	Add a public void removeFiles(List&lt;Path&gt; pathList)
throws Exception method to the ZipFileManager class. It will remove files from an archive. A list of the relative paths to
the files inside the archive will be passed in pathList. It must:
1.1. Throw a NoSuchZipFileException if the archive file doesn&#39;t exist.
1.2. Create a temporary archive file in the default directory using the Files class&#39;s createTempFile() method.
1.3. Go through all the files of the original archive, and check whether the current file is in the list
for removal.
- If the file is in the list, display a message indicating that we have removed the corresponding file and
move on to the next file.
- If the file is not in the removal list, copy it to the new archive
1.4. Replace the original archive file with the temporary file we wrote all of the required files to.
You need to do this using the Files class&#39;s move() method
2.	Add a public void removeFile(Path path) throws Exception method to the ZipFileManager class.
It should call the removeFiles method, creating a list out of a single element. This can be done using
the Collections class&#39;s singletonList() method. Look up how it works.
3.	Implement the ZipRemoveCommand class&#39;s execute() method: create a ZipFileManager object,
ask the user which file to remove from which archive, and call the removeFile() method.
Do everything else as we did in the other commands. You don&#39;t have to catch the PathNotFoundException, since  the
removeFile() method shouldn&#39;t throw it.
4.	Run the program and verify that removing a file from an archive works.



Archiver (part 18)


It&#39;s time to try to extract something. To do this, add a public void extractAll(Path
outputFolder) throws Exception method to the ZipFileManager class. The Path outputFolder parameter is the path to which we will
extract our archive. You already have extensive experience working with zip entries and streams, so I&#39;ll
only give you some hints on how to implement this method. You&#39;ll have to think carefully about how
to do the following:
1.	Check whether the zip file exists
2.	If the outputFolder directory does not exist, then it needs to be created, along with all the folders that
contain it.
3.	Inside the archive, some files may be inside folders. In this case, the ZipEntry.getName() method
doesn&#39;t exactly return the file name, as might be expected from the method name. Instead, it returns the file&#39;s relative path
inside the archive. This relative path should be retained after the extraction process is complete, but
it will become relative to the directory where we have extracted the archive
4.	Implement the ZipExtractCommand class&#39;s execute() method by analogy with our implementation of
ZipCreateCommand. Make a similar try-catch block, and simply change the displayed messages
so that the user knows we are currently extracting an archive, and that we need the archive&#39;s
full name and the directory to which we will extract the archive. Don&#39;t forget to call the
ZipFileManager class&#39;s extractAll method, and not createZip like we did in the ZipCreateCommand
5.	Run the program and enjoy the extracted results

Note:
Use Files.newInputStream(Path path) and Files.newOutputStream(Path path) to get read and write streams.



Archiver (part 18)


Everything is ready to implement the ZipContentCommand class&#39;s execute() method:
1.	Display &quot;Viewing contents of the archive.&quot;
2.	Create a ZipFileManager object using the getZipFileManager() method
3.	Display &quot;Archive contents:&quot;
4.	Get a list of the archive&#39;s files using the getFileList() method
5.	Display the properties of each file. The previously implemented
FileProperties.toString() method will come in handy
6.	Display &quot;Archive contents viewed.&quot;
7.	Run the program and verify that the &quot;View the contents of an archive&quot; command works



Archiver (part 18)


Let&#39;s continue to move toward getting the contents of an archive. Let&#39;s write a getFileList() method inside the
ZipFileManager class. It will return a list of the files in the archive, or rather a list of the properties of these files (
we already implemented the FileProperties class). Let&#39;s begin:
1.	Add a List&lt;FileProperties&gt; getFileList() throws Exception method to the ZipFileManager class.
2.	Inside that method, check whether zipFile is a regular file using
a suitable method from the Files class. If it is not a file, throw a NoSuchZipFileException.
3.	Create a list of FileProperties objects. We&#39;ll add the file properties to it.
4.	Create a ZipInputStream for the file represented by the zipFile variable. As we&#39;ve done before, wrap the creation of this object
in a try-with-resources.
5.	Go through all of the ZipEntries in the ZipInputStream
6.	For each ZipEntry, read its contents (otherwise, we won&#39;t have information about its
size). You can&#39;t find the size of a file in an archive without reading it. This is super easy to do
using the copyData method and a temporary ByteArrayOutputStream buffer.
7.	Get the name, size, compressed size, and compression method of the zip entry. Take a look at what else you can
learn about the entry.
8.	Create a FileProperties object using the obtained file data.
9.	Add the object created in step 8 to the list from step 3.
10.	Return the gathered information to the method that called the getFileList method.



