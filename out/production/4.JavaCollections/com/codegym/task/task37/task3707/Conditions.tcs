taskKey="com.codegym.task.task37.task3707.big06"\n\nAmigoSet (part 6)


Open the HashSet&#39;s source (if you don&#39;t have the Java source, download it, and connect it), and compare it to your code.
You can do this quickly by comparing with the clipboard. Copy the HashSet class&#39;s source code to the clipboard.
Go to the AmigoSet class, and then right-click -&gt; Compare with Clipboard.

You&#39;ve just implemented a set similar to HashSet. Now you understand how HashSet is built.
Well done! Now collections don&#39;t scare you!


Требования:
1.	Congratulations! You&#39;ve written your own set implementation and dived deep into HashSet!


AmigoSet (part 6)


Your AmigoSet set implements the Serializable interface. However, it doesn&#39;t serialize properly.

1. Implement your own logic for serializing and deserializing.
Remember which private methods you need to add in order to serialize correctly.
To serialize:
* serialize the set
* serialize the map object&#39;s capacity and loadFactor. You&#39;ll need them for deserialization.
Since this data is package-private, use the HashMapReflectionHelper utility class to get it.

To deserialize:
* read all of the data
* create a map using the constructor with capacity and loadFactor parameters

2. Remember what transient means?



AmigoSet (part 6)


Your AmigoSet set implements the Cloneable interface. However, it doesn&#39;t clone properly.
Write your own implementation of the Object clone() method, so that it creates a shallow clone.

* Clone the set, and clone map.
* Throw an InternalError if an exception occurs.
* Eliminate the throwing of other exceptions.

Expand the access modifier to public.



AmigoSet (part 6)


Write your own implementation of the following methods that allow you to work with the keys in map:
* Iterator&lt;E&gt; iterator () - Obviously, this is a key iterator. Get the set of keys in map, and return its iterator
* int size() - This is the number of keys in map. It is equal to the number of elements in map.
* boolean isEmpty()
* boolean contains(Object o)
* void clear()
* boolean remove(Object o)

Don&#39;t write anything of your own. Just use what has already been implemented for a set of keys in map.
Use Alt+Insert =&gt; Override methods



AmigoSet (part 6)


We won&#39;t re-invent the mechanism for working with hashes &mdash; It has already been implemented in lots of collections.
We&#39;ll grab HashMap and use it.

1. Create a private Object PRESENT constant and initialize it with an Object. This will be our stub.

2. Create a private transient HashMap&lt;E, Object&gt; map field. A list of keys will be our set. And instead of values, we&#39;ll shove the PRESENT stub into the map.
Remember, we only need keys, and for each key we&#39;ll insert PRESENT instead of values. We&#39;ve got to have something there :)
Let&#39;s see what we end up with :)

Collections usually have several constructors, so:

3. Create a no-argument constructor that initializes the map field.

4. Create a constructor with one Collection&lt;? extends E&gt; collection parameter.
To initialize the map field, use a constructor that lets you pass the initial capacity.
Calculate your capacity using the following formula: the maximum of 16 and the rounded-up value of (collection.size()/.75f)
Add all of the elements from the passed collection to our collection.
We have the method needed to add all the elements thanks to the fact that AbstractSet inherits AbstractCollection.

5. Write your own implementation of the add(E e) method: add element e to map as a key with PRESENT as the value.
Return true if the new element was added, otherwise return false.



AmigoSet (part 6)


Let&#39;s write some sort of collection. Let it be your very own Set.
Let this class allow null values to be added.

1. Create an AmigoSet class. Let this class inherit AbstractSet.
The set must support the Serializable and Cloneable interfaces (how could it not??).
It&#39;s also obvious that it must implement the Set interface.

2. The class must work with any type, so make it a generic class: add a type parameter, for example, E.
The standard letters used for generics are E (element), T (type), K (key), and V (value).
These names aren&#39;t essential, but they make the code easier to read.

3. Use IDEA&#39;s hotkeys to implement the necessary methods. Keep the default implementation.



